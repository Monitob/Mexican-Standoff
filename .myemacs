;*******************************************************************************;
;                                                                               ;
;                                                          :::      ::::::::    ;
;    dotemacs                                            :+:      :+:    :+:    ;
;                                                      +:+ +:+         +:+      ;
;    by: thor <thor@42.fr>                           +#+  +:+       +#+         ;
;                                                  +#+#+#+#+#+   +#+            ;
;    Created: 2013/06/18 14:01:14 by thor               #+#    #+#              ;
;    Updated: 2015/12/05 19:06:37 by jbernabe         ###   ########.fr        ;
;                                                                               ;
;*******************************************************************************;

; Load general features files
(setq config_files "/usr/share/emacs/site-lisp/")
(setq load-path (append (list nil config_files) load-path))

(load "list.el")
(load "string.el")
(load "comments.el")
(load "header.el")

; Set default emacs configuration
(set-language-environment "UTF-8")
(setq-default font-lock-global-modes nil)
(setq-default line-number-mode nil)
(setq-default tab-width 4)
(setq-default indent-tabs-mode t)
(global-set-key (kbd "DEL") 'backward-delete-char)
(setq-default c-backspace-function 'backward-delete-char)
(setq-default c-basic-offset 4)
(setq-default c-default-style "linux")
(setq-default tab-stop-list '(4 8 12 16 20 24 28 32 36 40 44 48 52 56 60
                             64 68 72 76 80 84 88 92 96 100 104 108 112 116 120))

(defun my-c-mode-hook ()
(c-set-style "my-c-style")
(c-set-offset 'substatement-open '0) ; brackets should be at same indentation level as the statements they open
(c-set-offset 'inline-open '+)
(c-set-offset 'block-open '+)
(c-set-offset 'brace-list-open '+)   ; all "opens" should be indented by the c-indent-level
(c-set-offset 'case-label '+))       ; indent case labels by c-indent-level, too

(add-hook 'c-mode-hook 'my-c-mode-hook)

(add-hook 'c-mode-hook 'my-c-mode-hook)

(defun ffr-insert-parentheses ()
	"insert parentheses and go between them"
	(interactive)
	(insert "()")
	(backward-char 1))

(defun ffr-insert-square-brackets ()
   "insert brackets and go between them"
   (interactive)
   (insert "[]")
   (backward-char 1))

(defun ffr-insert-braces ()
   "insert curly braces and go between them"
   (interactive)
   (insert "{}")
   (backward-char 2))
      
(defun ffr-insert-simple-quotes ()
   "insert simple quotes and go between them"
   (interactive)
   (insert "''")
   (backward-char 1))
			       
(defun ffr-insert-double-quotes ()
"insert double quotes and go between them"
   (interactive)
   (insert "\"\"")
   (backward-char 1))
			        
(defun ffr-insert-invert-quotes ()
"insert inverted quotes and go between them"
   (interactive)
   (insert "``")
   (backward-char 1))
							       
(defun ffr-insert-angle-brackets ()
	"insert > and go between them"
	(interactive)
	(insert "<>")
	(backward-char 1))

(add-hook 'c-mode-common-hook (lambda () (local-set-key "("  'ffr-insert-parentheses)))
(add-hook 'c-mode-common-hook (lambda () (local-set-key "["  'ffr-insert-square-brackets)))
(add-hook 'c-mode-common-hook (lambda () (local-set-key "{"  'ffr-insert-braces)))
(add-hook 'c-mode-common-hook (lambda () (local-set-key "'"  'ffr-insert-simple-quotes)))
(add-hook 'c-mode-common-hook (lambda () (local-set-key "\""  'ffr-insert-double-quotes)))
(add-hook 'c-mode-common-hook (lambda () (local-set-key "`"  'ffr-insert-invert-quotes)))
(add-hook 'c-mode-common-hook (lambda () (local-set-key "<"  'ffr-insert-angle-brackets)))

(setq backup-directory-alist '(("" . "~/.emacs.d/")))
;*******************************************************************************;
